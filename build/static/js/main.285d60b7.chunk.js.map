{"version":3,"sources":["components/aquarium/Aquarium.module.css","assets/rock2.svg","components/fish/Fish.module.css","assets/fish.svg","components/food/Food.module.css","components/githubIcon/GithubIcon.module.css","assets/land.svg","assets/rocks.svg","assets/rock.svg","assets/standing.svg","assets/standing2.svg","assets/sunlight.svg","assets/sea-kelp.svg","assets/blue-shape.svg","assets/blue-shape2.svg","assets/green-shape.svg","assets/green-shape2.svg","assets/purple-shape.svg","assets/red-shape.svg","assets/bubble.svg","utils.js","components/fish/Fish.js","components/food/Food.js","components/githubIcon/GithubIcon.js","components/aquarium/Aquarium.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","distanceBetweenTwoPoints","point1","point2","Math","sqrt","pow","x","y","getAngleBetweenTwoPoints","atan2","PI","toFixed","randomPoint","maxPosition","sizeInfoFish","floor","random","width","height","calculateNextPoint","newX","newY","xDistance","yDistance","m","b","equationOfLinear","abs","collisionDetection","rect1","rect2","Fish","props","move","targetPoint","Utils","state","maxPositionAquarium","movementInterval","interval","setInterval","fishPosition","angle","direction","nextPoint","maxDistanceToChangeDirectionAndAngle","newPosition","setState","fishObject","targetObject","clearInterval","idle","timeInMilliseconds","idleTimeout","timeout","setTimeout","getFishSizeInfo","element","default","getBoundingClientRect","sizeInfoAquarium","borderRadius","size","round","this","ref","src","FishSvg","alt","className","classes","style","top","left","transform","clearTimeout","React","PureComponent","Food","maxY","yPosition","destroy","window","innerHeight","xPosition","target","href","GithubIcon","children","Aquarium","handleClick","event","foodInstance","pageX","destroyFood","addBubbleToScreen","addBubbleInterval","bubbles","current","list","length","innerWidth","scale","scaleBubble","min","max","key","BubbleSvg","Bubble","bottom","right","getAquariumSizeInfo","Array","document","addEventListener","Background","StandingSvg","Standing","Standing2Svg","Standing2","SeaKelpSvg","SeaKelp","RockSvg","Rock","RocksSvg","Rocks","BlueShapeSvg","BlueShape","BlueShape2Svg","BlueShape2","Rock2Svg","Rock2","Rock3","GreenShapeSvg","GreenShape","GreenShape2Svg","GreenShape2","PurpleShapeSvg","PurpleShape","RedShapeSvg","RedShape","map","item","LandSvg","Land","sunlightSvg","Sunlight","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.285d60b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Aquarium\":\"Aquarium_Aquarium__tQejz\",\"Background\":\"Aquarium_Background__1tbqt\",\"Land\":\"Aquarium_Land__QSN87\",\"Rocks\":\"Aquarium_Rocks__sMIb_\",\"Rock\":\"Aquarium_Rock__1-ltl\",\"Standing\":\"Aquarium_Standing__1_yav\",\"Standing2\":\"Aquarium_Standing2__OR3a9\",\"Sunlight\":\"Aquarium_Sunlight__1rWP1\",\"SeaKelp\":\"Aquarium_SeaKelp__1stG2\",\"BlueShape\":\"Aquarium_BlueShape__1n1nb\",\"BlueShape2\":\"Aquarium_BlueShape2__3k8HL\",\"GreenShape\":\"Aquarium_GreenShape__1OwGD\",\"GreenShape2\":\"Aquarium_GreenShape2__3xz5W\",\"Rock2\":\"Aquarium_Rock2__1taqG\",\"Rock3\":\"Aquarium_Rock3__2z6G7\",\"PurpleShape\":\"Aquarium_PurpleShape__1PxV2\",\"RedShape\":\"Aquarium_RedShape__2NwmC\",\"Bubble\":\"Aquarium_Bubble__3PKjo\",\"moveBubble\":\"Aquarium_moveBubble__32zRN\"};","module.exports = __webpack_public_path__ + \"static/media/rock2.0c047bfc.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Fish\":\"Fish_Fish__1Z0ry\"};","module.exports = __webpack_public_path__ + \"static/media/fish.a6ec6b72.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Food\":\"Food_Food__3ZtMC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GithubIcon\":\"GithubIcon_GithubIcon__18cKc\"};","module.exports = __webpack_public_path__ + \"static/media/land.5010d4f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocks.8fa88985.svg\";","module.exports = __webpack_public_path__ + \"static/media/rock.771f0d0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing.7e075853.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing2.aa55cd6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunlight.5ec30dde.svg\";","module.exports = __webpack_public_path__ + \"static/media/sea-kelp.38be889c.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape.40d840ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape2.15d7a192.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape.0baeed56.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape2.80a36b2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/purple-shape.afc4ef84.svg\";","module.exports = __webpack_public_path__ + \"static/media/red-shape.8d493c82.svg\";","module.exports = __webpack_public_path__ + \"static/media/bubble.69126146.svg\";","/**\r\n * Calculate equation of linear by 2 different points.\r\n * return m (slope) and b\r\n */\r\nexport const equationOfLinear = (point1, point2) => {\r\n    const xDistance = point1.x - point2.x;\r\n    const yDistance = point1.y - point2.y;\r\n\r\n    const m = xDistance !== 0 ? (yDistance / xDistance) : 0;\r\n    const b = point1.y - (m * point1.x);\r\n\r\n    return { m, b };\r\n};\r\n\r\n/**\r\n * Return distance between 2 different points.\r\n */\r\nexport const distanceBetweenTwoPoints = (point1, point2) => {\r\n    return Math.sqrt(Math.pow((point2.x - point1.x), 2) + Math.pow((point2.y - point1.y), 2));\r\n};\r\n\r\n/**\r\n * Return angle between 2 different points.\r\n */\r\nexport const getAngleBetweenTwoPoints = (point1, point2) => {\r\n    return (Math.atan2(point2.y - point1.y, point2.x - point1.x) * 180 / Math.PI).toFixed(3);\r\n};\r\n\r\n/**\r\n * Return random point that between 0 to max position of aquarium minus fish size.\r\n */\r\nexport const randomPoint = (maxPosition, sizeInfoFish) => {\r\n    return {\r\n        x: Math.floor(Math.random() * (maxPosition.x - sizeInfoFish.width)),\r\n        y: Math.floor(Math.random() * (maxPosition.y - sizeInfoFish.height))\r\n    };\r\n};\r\n\r\n/**\r\n * Return next point on linear equation, advanced by plus pixel\r\n */\r\nexport const calculateNextPoint = (point1, point2) => {\r\n    // Get b and m (slope)\r\n    const { m, b } = equationOfLinear(point1, point2);\r\n\r\n    // Calculate distance on axios\r\n    const dx = Math.abs(point1.x - point2.x);\r\n    const dy = Math.abs(point1.y - point2.y);\r\n\r\n    let newX;\r\n    let newY;\r\n    // If distance x bigger than distance y, changing x position and accordingly changing y position\r\n    if (dx > dy) {\r\n        // If x of point1 is smaller from x point2\r\n        if (point1.x < point2.x) {\r\n            // Add pixel at x axios\r\n            newX = point1.x + 1;\r\n        }\r\n        else {\r\n            // Less pixel at x axios\r\n            newX = point1.x - 1;\r\n        }\r\n\r\n        // Calculate y position by new x position\r\n        newY = m * newX + b;\r\n    }\r\n    else {\r\n        // If y of point1 is smaller from y point2\r\n        if (point1.y < point2.y) {\r\n            // Add pixel at y axios\r\n            newY = point1.y + 1;\r\n        }\r\n        else {\r\n            // Less pixel at y axios\r\n            newY = point1.y - 1;\r\n        }\r\n\r\n        // Calculate x position by new y position, if m is 0 then copy value for old x point2\r\n        newX = m !== 0 ? (newY - b) / m : point2.x;\r\n    }\r\n\r\n    return {\r\n        x: newX,\r\n        y: newY\r\n    }\r\n};\r\n\r\n/**\r\n * Check if 2 different objects collision each other\r\n */\r\nexport const collisionDetection = (rect1, rect2) => {\r\n    return (rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y)\r\n}\r\n\r\n/**\r\n * Return zero or one by random math function\r\n */\r\nexport const randomBetweenZeroAndOne = () => {\r\n    return Math.round( Math.random() );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Fish.module.css';\r\nimport FishSvg from '../../assets/fish.svg';\r\n\r\nclass Fish extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Max position by aquarium minus border\r\n        const maxPositionAquarium = {\r\n            x: props.sizeInfoAquarium.width - props.sizeInfoAquarium.borderRadius,// minus border right and left\r\n            y: props.sizeInfoAquarium.height - props.sizeInfoAquarium.borderRadius// minus border top and bottom\r\n        };\r\n\r\n        this.state = {\r\n            size: 1,\r\n            fishPosition: Utils.randomPoint(maxPositionAquarium, { width: 30, height: 30 }),\r\n            direction: \"left\",\r\n            angle: 0,\r\n            maxPositionAquarium: maxPositionAquarium,\r\n            sizeInfoFish: {\r\n                width: 60,\r\n                height: 50,\r\n                default: true\r\n            }\r\n        };\r\n\r\n        this.movementInterval = {\r\n            interval : null,\r\n            timeInMilliseconds: 15\r\n        };\r\n        this.idleTimeout = {\r\n            timeout : null,\r\n            timeInMilliseconds: 1000\r\n        };\r\n\r\n        this.maxDistanceToChangeDirectionAndAngle = 10;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // Selects by random starting idle mode or move mode\r\n        if( Utils.randomBetweenZeroAndOne() === 1 )\r\n            this.idle();\r\n        else\r\n        {\r\n            this.move();\r\n        }\r\n    }\r\n\r\n    move = () => {\r\n        // Get target random point that fish will move\r\n        let targetPoint = Utils.randomPoint(this.state.maxPositionAquarium, this.state.sizeInfoFish);\r\n\r\n        // Start move fish to target point,\r\n        // stop when fish collision with target point\r\n        // then call to idle function\r\n        this.movementInterval.interval = setInterval(() => {\r\n            const { fishPosition } = this.state;\r\n            let { angle, direction } = this.state;\r\n\r\n            // The next point fish will move in this run interval to target point\r\n            const nextPoint = Utils.calculateNextPoint(fishPosition, targetPoint);\r\n            // Distance between fish and target point\r\n            const distance = Utils.distanceBetweenTwoPoints(fishPosition, targetPoint);\r\n\r\n            // Making sure the direction and angle not change when the distance in less 2 digital\r\n            if (distance > this.maxDistanceToChangeDirectionAndAngle) {\r\n                direction = fishPosition.x < nextPoint.x ? \"right\" : \"left\";\r\n                // Angle\r\n                angle = Utils.getAngleBetweenTwoPoints(fishPosition, nextPoint) - 180;\r\n            }\r\n\r\n            const newPosition = {\r\n                x: nextPoint.x,\r\n                y: nextPoint.y\r\n            };\r\n\r\n            // Update state\r\n            this.setState({ fishPosition: newPosition, direction, angle });\r\n\r\n            // For check collision detection between fish and target point\r\n            const fishObject = {...newPosition, width: this.state.sizeInfoFish.width, height: this.state.sizeInfoFish.height};\r\n            const targetObject = { ...targetPoint, width: 1, height: 1 };\r\n            // Check if there is collision between fish and target point\r\n            if (Utils.collisionDetection(fishObject, targetObject)) {\r\n                clearInterval(this.movementInterval.interval);\r\n                this.idle();\r\n            }\r\n        }, this.movementInterval.timeInMilliseconds);\r\n    };\r\n\r\n    idle = () => {\r\n        this.idleTimeout.timeout = setTimeout(\r\n            // Call to callback after x time\r\n            this.move,\r\n            this.idleTimeout.timeInMilliseconds);\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of fish by reference React\r\n     */\r\n    getFishSizeInfo = (element) => {\r\n        // Check if fish detail overwrite at state\r\n        if (this.state.sizeInfoFish.default) {\r\n            const sizeInfoFish = element.getBoundingClientRect();\r\n            sizeInfoFish.default = false;\r\n\r\n            this.setState({ sizeInfoFish })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img\r\n                ref={this.getFishSizeInfo}\r\n                src={FishSvg}\r\n                alt=\"\"\r\n                className={classes.Fish}\r\n                style={\r\n                    {\r\n                        top: this.state.fishPosition.y,\r\n                        left: this.state.fishPosition.x,\r\n                        transform: `rotate(${this.state.angle}deg) scaleY(${this.state.direction === \"right\" ? -1 : 1})`\r\n                    }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.movementInterval.interval);\r\n        clearTimeout(this.idleTimeout.timeout);\r\n    }\r\n}\r\n\r\nFish.propTypes = {\r\n    food: PropTypes.bool\r\n}\r\n\r\nexport default Fish;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classes from './Food.module.css';\r\n\r\nclass Food extends React.PureComponent {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            yPosition: 0,\r\n            maxY: window.innerHeight\r\n        };\r\n\r\n        this.movementInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: 5\r\n        };\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.movementInterval.interval = setInterval(\r\n            this.move,\r\n            this.movementInterval.timeInMilliseconds\r\n            );\r\n    }\r\n\r\n    move = () => {\r\n        // Check if food at aquarium by y axios\r\n        if( this.state.maxY > this.state.yPosition )\r\n        {\r\n            this.setState({ yPosition: this.state.yPosition+1 });\r\n        }\r\n        else{\r\n            // destroy instance by call aquarium's function\r\n            this.props.destroy();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Food} style={{left: this.props.xPosition, top: this.state.yPosition}}>\r\n                Food\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.movementInterval.interval);\r\n    }\r\n}\r\n\r\nFood.propTypes = {\r\n    xPosition: PropTypes.number\r\n};\r\n\r\nexport default Food;","import React from 'react';\r\n\r\nimport classes from './GithubIcon.module.css';\r\nexport default (props) => {\r\n    return(\r\n    <a target=\"_blank\" href={\"https://github.com/alonlevim/aquarium\"} className={classes.GithubIcon}>\r\n        {props.children}\r\n    </a>\r\n    )\r\n};","import React from 'react';\r\nimport Fish from '../fish/Fish';\r\nimport Food from '../food/Food';\r\nimport GithubIcon from '../githubIcon/GithubIcon';\r\n\r\nimport classes from './Aquarium.module.css';\r\nimport LandSvg from '../../assets/land.svg';\r\nimport RocksSvg from '../../assets/rocks.svg';\r\nimport RockSvg from '../../assets/rock.svg';\r\nimport StandingSvg from '../../assets/standing.svg';\r\nimport Standing2Svg from '../../assets/standing2.svg';\r\nimport sunlightSvg from '../../assets/sunlight.svg';\r\nimport SeaKelpSvg from '../../assets/sea-kelp.svg';\r\nimport BlueShapeSvg from '../../assets/blue-shape.svg';\r\nimport BlueShape2Svg from '../../assets/blue-shape2.svg';\r\nimport GreenShapeSvg from '../../assets/green-shape.svg';\r\nimport GreenShape2Svg from '../../assets/green-shape2.svg';\r\nimport PurpleShapeSvg from '../../assets/purple-shape.svg';\r\nimport RedShapeSvg from '../../assets/red-shape.svg';\r\nimport BubbleSvg from '../../assets/bubble.svg';\r\nimport Rock2Svg from '../../assets/rock2.svg';\r\nimport { clearInterval } from 'timers';\r\n\r\n\r\nclass Aquarium extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            foodInstance: null,\r\n            bubbles: {\r\n                current: 0,\r\n                list: new Array(50)\r\n            },\r\n            sizeInfoAquarium: null\r\n        };\r\n\r\n        this.addBubbleInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: 250\r\n        };\r\n\r\n        this.borderRadius = 30;\r\n        this.scaleBubble = {min: 0.1, max: 1.5};\r\n\r\n        // When click on aquarium show one food\r\n        document.addEventListener(\"click\", this.handleClick);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.addBubbleToScreen();\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        // Check if there is no foodInstance in aquarium\r\n        if (!this.state.foodInstance)\r\n            this.setState(\r\n                {\r\n                foodInstance:\r\n                    <Food\r\n                    xPosition={event.pageX-this.state.sizeInfoAquarium.x}\r\n                    destroy={this.destroyFood} />\r\n                });\r\n    };\r\n\r\n    destroyFood = () => {\r\n        this.setState({ foodInstance: null });\r\n    };\r\n\r\n    addBubbleToScreen = () => {\r\n        this.addBubbleInterval.interval = setInterval(() => {\r\n            this.setState((state) => {\r\n                // New assign to object bubbles\r\n                const bubbles = { ...state.bubbles };\r\n                \r\n                // If current find in last bubble in list\r\n                if (bubbles.current >= bubbles.list.length) {\r\n                    bubbles.current = 0;\r\n                }\r\n\r\n                // Get random point to instance bubble\r\n                const xPosition = Math.floor(Math.random() * window.innerWidth);\r\n                // Get random scale of bubble\r\n                const scale = (Math.random() + this.scaleBubble.min) * this.scaleBubble.max;\r\n\r\n                // Reset next bubble in list\r\n                bubbles.list[bubbles.current + 1 < bubbles.list.length ? bubbles.current + 1 : 0] = null;\r\n                // New assign bubble in current index in bubble list\r\n                bubbles.list[bubbles.current] = <img\r\n                    key={bubbles.current}\r\n                    src={BubbleSvg}\r\n                    alt=\"\"\r\n                    className={classes.Bubble}\r\n                    style={{ bottom: \"50px\", right: `${xPosition}px`, transform: `scale(${scale})` }}\r\n                />;\r\n                // Plus current index bubble\r\n                bubbles.current++;\r\n\r\n                // Update state\r\n                return { bubbles };\r\n            });\r\n        }, this.addBubbleInterval.timeInMilliseconds);\r\n    }\r\n\r\n    /**\r\n     * Get width, height and position of aquarium by reference React\r\n     */\r\n    getAquariumSizeInfo = (element) => {\r\n        // Check if aquarium detail overwrite at state\r\n        if (this.state.sizeInfoAquarium == null) {\r\n\r\n            const sizeInfoAquarium = element.getBoundingClientRect();\r\n            sizeInfoAquarium.borderRadius = this.borderRadius;\r\n            \r\n            this.setState({ sizeInfoAquarium })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Aquarium}>\r\n                <div className={classes.Background} ref={this.getAquariumSizeInfo}>\r\n                    <GithubIcon />\r\n                    <img src={StandingSvg} alt=\"\" className={classes.Standing} />\r\n                    <img src={Standing2Svg} alt=\"\" className={classes.Standing2} />\r\n                    <img src={SeaKelpSvg} alt=\"\" className={classes.SeaKelp} />\r\n                    <img src={RockSvg} alt=\"\" className={classes.Rock} />\r\n                    <img src={RocksSvg} alt=\"\" className={classes.Rocks} />\r\n                    <img src={BlueShapeSvg} alt=\"\" className={classes.BlueShape} />\r\n                    <img src={BlueShape2Svg} alt=\"\" className={classes.BlueShape2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock3} />\r\n                    <img src={GreenShapeSvg} alt=\"\" className={classes.GreenShape} />\r\n                    <img src={GreenShape2Svg} alt=\"\" className={classes.GreenShape2} />\r\n                    <img src={PurpleShapeSvg} alt=\"\" className={classes.PurpleShape} />\r\n                    <img src={RedShapeSvg} alt=\"\" className={classes.RedShape} />\r\n                    {this.state.bubbles.list.map(item => item)}\r\n                    {this.state.foodInstance}\r\n\r\n                    {this.state.sizeInfoAquarium != null ? <Fish sizeInfoAquarium={this.state.sizeInfoAquarium} /> : null}\r\n                    {this.state.sizeInfoAquarium != null ? <Fish sizeInfoAquarium={this.state.sizeInfoAquarium} /> : null}\r\n                    {this.state.sizeInfoAquarium != null ? <Fish sizeInfoAquarium={this.state.sizeInfoAquarium} /> : null}\r\n                    {this.state.sizeInfoAquarium != null ? <Fish sizeInfoAquarium={this.state.sizeInfoAquarium} /> : null}\r\n                    {this.state.sizeInfoAquarium != null ? <Fish sizeInfoAquarium={this.state.sizeInfoAquarium} /> : null}\r\n\r\n                    <img src={LandSvg} alt=\"\" className={classes.Land} />\r\n                    <img src={sunlightSvg} alt=\"\" className={classes.Sunlight} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        clearInterval(this.addBubbleInterval.interval);\r\n    }\r\n}\r\n\r\nexport default Aquarium;","import React from 'react';\nimport Aquarium from './components/aquarium/Aquarium';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Aquarium />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}