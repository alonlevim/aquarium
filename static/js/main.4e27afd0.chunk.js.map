{"version":3,"sources":["components/aquarium/Aquarium.module.css","components/food/Food.module.css","assets/rock2.svg","components/fish/Fish.module.css","assets/fish.svg","assets/yellow-food.svg","assets/green-food.svg","components/githubIcon/GithubIcon.module.css","assets/land.svg","assets/rocks.svg","assets/rock.svg","assets/standing.svg","assets/standing2.svg","assets/sunlight.svg","assets/sea-kelp.svg","assets/blue-shape.svg","assets/blue-shape2.svg","assets/green-shape.svg","assets/green-shape2.svg","assets/purple-shape.svg","assets/red-shape.svg","assets/bubble.svg","utils.js","components/fish/Fish.js","components/food/Food.js","components/githubIcon/GithubIcon.js","components/aquarium/Aquarium.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","distanceBetweenTwoPoints","point1","point2","Math","sqrt","pow","x","y","getAngleBetweenTwoPoints","atan2","PI","toFixed","randomPoint","maxPosition","sizeInfoFish","floor","random","width","height","calculateNextPoint","newX","newY","xDistance","yDistance","m","b","equationOfLinear","abs","collisionDetection","rect1","rect2","randomBetweenZeroAndOne","round","DIRECTION","RIGHT","LEFT","Fish","props","move","clearInterval","movementInterval","interval","tempTargetPoint","Utils","state","maxPositionAquarium","setInterval","targetPoint","food","point","fishPosition","angle","direction","nextPoint","maxDistanceToChangeDirectionAndAngle","newPosition","setState","fishObject","targetObject","eatFood","idle","speed","idleTimeout","timeout","setTimeout","timeInMilliseconds","destroyFood","size","getFishSizeInfo","element","default","getBoundingClientRect","rectAquarium","defaultTimeInMilliseconds","this","oldState","ref","src","FishSvg","alt","className","classes","style","top","left","transform","clearTimeout","React","PureComponent","FOOD_COLOR","GREEN","GreenFoodSvg","class","YELLOW","YellowFoodSvg","Food","maxY","yPosition","newYPosition","update","xPosition","destroy","color","init","slowDownTimeInMilliseconds","join","target","href","GithubIcon","children","Aquarium","handleClick","event","instance","mousePoint","pageX","pageY","updateFood","foodPoint","addBubbleToScreen","addBubbleInterval","bubbles","current","list","length","window","innerWidth","scale","scaleBubble","min","max","key","BubbleSvg","Bubble","bottom","right","getAquariumSizeInfo","elementAquarium","borderRadius","initInstanceFish","fish","i","count","push","index","Array","document","addEventListener","Background","StandingSvg","Standing","Standing2Svg","Standing2","SeaKelpSvg","SeaKelp","RockSvg","Rock","RocksSvg","Rocks","BlueShapeSvg","BlueShape","BlueShape2Svg","BlueShape2","Rock2Svg","Rock2","Rock3","GreenShapeSvg","GreenShape","GreenShape2Svg","GreenShape2","PurpleShapeSvg","PurpleShape","RedShapeSvg","RedShape","map","item","LandSvg","Land","sunlightSvg","Sunlight","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e27afd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Aquarium\":\"Aquarium_Aquarium__tQejz\",\"Background\":\"Aquarium_Background__1tbqt\",\"Land\":\"Aquarium_Land__QSN87\",\"Rocks\":\"Aquarium_Rocks__sMIb_\",\"Rock\":\"Aquarium_Rock__1-ltl\",\"Standing\":\"Aquarium_Standing__1_yav\",\"Standing2\":\"Aquarium_Standing2__OR3a9\",\"Sunlight\":\"Aquarium_Sunlight__1rWP1\",\"SeaKelp\":\"Aquarium_SeaKelp__1stG2\",\"BlueShape\":\"Aquarium_BlueShape__1n1nb\",\"BlueShape2\":\"Aquarium_BlueShape2__3k8HL\",\"GreenShape\":\"Aquarium_GreenShape__1OwGD\",\"GreenShape2\":\"Aquarium_GreenShape2__3xz5W\",\"Rock2\":\"Aquarium_Rock2__1taqG\",\"Rock3\":\"Aquarium_Rock3__2z6G7\",\"PurpleShape\":\"Aquarium_PurpleShape__1PxV2\",\"RedShape\":\"Aquarium_RedShape__2NwmC\",\"Bubble\":\"Aquarium_Bubble__3PKjo\",\"moveBubble\":\"Aquarium_moveBubble__32zRN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Food\":\"Food_Food__3ZtMC\",\"yellow\":\"Food_yellow__1UZ4Q\",\"green\":\"Food_green__10WJz\"};","module.exports = __webpack_public_path__ + \"static/media/rock2.0c047bfc.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Fish\":\"Fish_Fish__1Z0ry\"};","module.exports = __webpack_public_path__ + \"static/media/fish.a6ec6b72.svg\";","module.exports = __webpack_public_path__ + \"static/media/yellow-food.0f938568.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-food.bf3ea358.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GithubIcon\":\"GithubIcon_GithubIcon__18cKc\"};","module.exports = __webpack_public_path__ + \"static/media/land.5010d4f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocks.8fa88985.svg\";","module.exports = __webpack_public_path__ + \"static/media/rock.771f0d0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing.7e075853.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing2.aa55cd6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunlight.5ec30dde.svg\";","module.exports = __webpack_public_path__ + \"static/media/sea-kelp.38be889c.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape.40d840ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape2.15d7a192.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape.0baeed56.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape2.80a36b2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/purple-shape.afc4ef84.svg\";","module.exports = __webpack_public_path__ + \"static/media/red-shape.8d493c82.svg\";","module.exports = __webpack_public_path__ + \"static/media/bubble.69126146.svg\";","/**\r\n * Calculate equation of linear by 2 different points.\r\n * return m (slope) and b\r\n */\r\nexport const equationOfLinear = (point1, point2) => {\r\n    const xDistance = point1.x - point2.x;\r\n    const yDistance = point1.y - point2.y;\r\n\r\n    const m = xDistance !== 0 ? (yDistance / xDistance) : 0;\r\n    const b = point1.y - (m * point1.x);\r\n\r\n    return { m, b };\r\n};\r\n\r\n/**\r\n * Return distance between 2 different points.\r\n */\r\nexport const distanceBetweenTwoPoints = (point1, point2) => {\r\n    return Math.sqrt(Math.pow((point2.x - point1.x), 2) + Math.pow((point2.y - point1.y), 2));\r\n};\r\n\r\n/**\r\n * Return angle between 2 different points.\r\n */\r\nexport const getAngleBetweenTwoPoints = (point1, point2) => {\r\n    return (Math.atan2(point2.y - point1.y, point2.x - point1.x) * 180 / Math.PI).toFixed(3);\r\n};\r\n\r\n/**\r\n * Return random point that between 0 to max position of aquarium minus fish size.\r\n */\r\nexport const randomPoint = (maxPosition, sizeInfoFish) => {\r\n    return {\r\n        x: Math.floor(Math.random() * (maxPosition.x - sizeInfoFish.width)),\r\n        y: Math.floor(Math.random() * (maxPosition.y - sizeInfoFish.height))\r\n    };\r\n};\r\n\r\n/**\r\n * Return next point on linear equation, advanced by plus pixel\r\n */\r\nexport const calculateNextPoint = (point1, point2) => {\r\n    // Get b and m (slope)\r\n    const { m, b } = equationOfLinear(point1, point2);\r\n\r\n    // Calculate distance on axios\r\n    const dx = Math.abs(point1.x - point2.x);\r\n    const dy = Math.abs(point1.y - point2.y);\r\n\r\n    let newX;\r\n    let newY;\r\n    // If distance x bigger than distance y, changing x position and accordingly changing y position\r\n    if (dx > dy) {\r\n        // If x of point1 is smaller from x point2\r\n        if (point1.x < point2.x) {\r\n            // Add pixel at x axios\r\n            newX = point1.x + 1;\r\n        }\r\n        else {\r\n            // Less pixel at x axios\r\n            newX = point1.x - 1;\r\n        }\r\n\r\n        // Calculate y position by new x position\r\n        newY = m * newX + b;\r\n    }\r\n    else {\r\n        // If y of point1 is smaller from y point2\r\n        if (point1.y < point2.y) {\r\n            // Add pixel at y axios\r\n            newY = point1.y + 1;\r\n        }\r\n        else {\r\n            // Less pixel at y axios\r\n            newY = point1.y - 1;\r\n        }\r\n\r\n        // Calculate x position by new y position, if m is 0 then copy value for old x point2\r\n        newX = m !== 0 ? (newY - b) / m : point2.x;\r\n    }\r\n\r\n    return {\r\n        x: newX,\r\n        y: newY\r\n    }\r\n};\r\n\r\n/**\r\n * Check if 2 different objects collision each other\r\n */\r\nexport const collisionDetection = (rect1, rect2) => {\r\n    return (rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y)\r\n}\r\n\r\n/**\r\n * Return zero or one by random math function\r\n */\r\nexport const randomBetweenZeroAndOne = () => {\r\n    return Math.round( Math.random() );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Fish.module.css';\r\nimport FishSvg from '../../assets/fish.svg';\r\n\r\nconst DIRECTION = {\r\n    RIGHT: \"right\",\r\n    LEFT: \"left\"\r\n};\r\n\r\nclass Fish extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Max Aquarium point on screen\r\n        const maxPositionAquarium = {\r\n            x: props.rectAquarium.width,\r\n            y: props.rectAquarium.height\r\n        };\r\n        // Movement fish\r\n        this.movementInterval = {\r\n            interval: null,\r\n            defaultTimeInMilliseconds: 15\r\n        };\r\n\r\n        this.state = {\r\n            size: 1,\r\n            fishPosition: Utils.randomPoint(maxPositionAquarium, { width: 30, height: 30 }),\r\n            direction: DIRECTION.LEFT,\r\n            angle: 0,\r\n            speed: this.movementInterval.defaultTimeInMilliseconds,\r\n            maxPositionAquarium: maxPositionAquarium,\r\n            sizeInfoFish: {\r\n                width: 60,\r\n                height: 50,\r\n                default: true\r\n            },\r\n            food: {\r\n                point: null\r\n            }\r\n        };\r\n\r\n        // Idle fish\r\n        this.idleTimeout = {\r\n            timeout: null,\r\n            timeInMilliseconds: 1000\r\n        };\r\n\r\n        this.maxDistanceToChangeDirectionAndAngle = 10;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // Selects by random starting idle mode or move mode\r\n        if (Utils.randomBetweenZeroAndOne() === 1)\r\n            this.idle();\r\n        else {\r\n            this.move();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(props, state) {\r\n        // There is food or after the food destroyed\r\n        if (props.food || state.food.point) {\r\n            this.setState((oldState) => {\r\n                let { food, speed } = { ...oldState };\r\n                // Update food point\r\n                food.point = props.food;\r\n                // Speed fish change to be fast fish if have food or default if there is no\r\n                speed = props.food ? 1 : this.movementInterval.defaultTimeInMilliseconds;\r\n\r\n                return { food, speed };\r\n            }, this.move);\r\n        }\r\n    }\r\n\r\n    move = () => {\r\n        // Disable move interval if there is\r\n        clearInterval(this.movementInterval.interval);\r\n        // Get target random point that fish will move\r\n        let tempTargetPoint = Utils.randomPoint(this.state.maxPositionAquarium, this.state.sizeInfoFish);\r\n\r\n        // Start move fish to target point,\r\n        // stop when fish collision with target point\r\n        // then call to idle function\r\n        this.movementInterval.interval = setInterval(() => {\r\n            // Check if there is food on screen\r\n            // The target point will be food point if there is in aquarium\r\n            // Else temp target point\r\n            const targetPoint = this.state.food.point || tempTargetPoint;\r\n\r\n            const { fishPosition } = this.state;\r\n            let { angle, direction } = this.state;\r\n\r\n            // The next point fish will move in this run interval to target point\r\n            const nextPoint = Utils.calculateNextPoint(fishPosition, targetPoint);\r\n            // Distance between fish and target point\r\n            const distance = Utils.distanceBetweenTwoPoints(fishPosition, targetPoint);\r\n\r\n            // Making sure the direction and angle not change when the distance in less 2 digital\r\n            if (distance > this.maxDistanceToChangeDirectionAndAngle) {\r\n                direction = fishPosition.x < nextPoint.x ? DIRECTION.RIGHT : DIRECTION.LEFT;\r\n                // Angle\r\n                angle = Utils.getAngleBetweenTwoPoints(fishPosition, nextPoint) - 180;\r\n            }\r\n\r\n            const newPosition = {\r\n                x: nextPoint.x,\r\n                y: nextPoint.y\r\n            };\r\n\r\n            // Update state\r\n            this.setState({ fishPosition: newPosition, direction, angle });\r\n\r\n            // For check collision detection between fish and target point\r\n            const fishObject = { ...newPosition, width: this.state.sizeInfoFish.width, height: this.state.sizeInfoFish.height };\r\n            const targetObject = { ...targetPoint, width: 1, height: 1 };\r\n            // Check if there is collision between fish and target point\r\n            if (Utils.collisionDetection(fishObject, targetObject)) {\r\n                // Disable next run\r\n                clearInterval(this.movementInterval.interval);\r\n\r\n                // If the target is food\r\n                if (this.state.food.point) {\r\n                    this.eatFood();\r\n                }\r\n                else {\r\n                    this.idle();\r\n                }\r\n            }\r\n        }, this.state.speed);\r\n    };\r\n\r\n    idle = () => {\r\n        this.idleTimeout.timeout = setTimeout(\r\n            // Call to callback after x time\r\n            this.move,\r\n            this.idleTimeout.timeInMilliseconds);\r\n    };\r\n\r\n    /**\r\n     * When have collision fish with food, then destroy food\r\n     */\r\n    eatFood = () => {\r\n        this.props.destroyFood();\r\n        // Increase fish size\r\n        this.setState({ size: this.state.size + 1 });\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of fish by reference React\r\n     */\r\n    getFishSizeInfo = (element) => {\r\n        // Check if fish detail overwrite at state\r\n        if (this.state.sizeInfoFish.default) {\r\n            const sizeInfoFish = element.getBoundingClientRect();\r\n            sizeInfoFish.default = false;\r\n\r\n            this.setState({ sizeInfoFish })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {fishPosition, angle, size, direction} = this.state;\r\n\r\n        return (\r\n            <img\r\n                ref={this.getFishSizeInfo}\r\n                src={FishSvg}\r\n                alt=\"\"\r\n                className={classes.Fish}\r\n                style={\r\n                    {\r\n                        top: fishPosition.y,\r\n                        left: fishPosition.x,\r\n                        transform: `\r\n                        rotate(${angle}deg)\r\n                        scale(${0.9 + (size * 0.1)}, ${direction === DIRECTION.RIGHT ? (0.9 + (size * 0.1)) * (-1) : (0.9 + (size * 0.1))})\r\n                        `\r\n                    }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval and timeout\r\n        clearInterval(this.movementInterval.interval);\r\n        clearTimeout(this.idleTimeout.timeout);\r\n    }\r\n}\r\n\r\nFish.propTypes = {\r\n    food: PropTypes.object\r\n}\r\n\r\nexport default Fish;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Food.module.css';\r\nimport YellowFoodSvg from '../../assets/yellow-food.svg';\r\nimport GreenFoodSvg from '../../assets/green-food.svg';\r\n\r\nconst FOOD_COLOR = {\r\n    GREEN: {\r\n        src: GreenFoodSvg,\r\n        class: 'green'\r\n    },\r\n    YELLOW: {\r\n        src: YellowFoodSvg,\r\n        class: 'yellow'\r\n    }\r\n};\r\n\r\nclass Food extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            yPosition: 0,\r\n            maxY: props.rectAquarium.height,\r\n            color: Utils.randomBetweenZeroAndOne() ? FOOD_COLOR.GREEN : FOOD_COLOR.YELLOW\r\n        };\r\n\r\n        this.movementInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: props.init.slowDownTimeInMilliseconds\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.movementInterval.interval = setInterval(\r\n            this.move,\r\n            this.movementInterval.timeInMilliseconds\r\n        );\r\n    }\r\n\r\n    move = () => {\r\n        // Check if food at aquarium by y axios\r\n        if (this.state.maxY > this.state.yPosition) {\r\n            const newYPosition = this.state.yPosition + 1;\r\n\r\n            this.setState({ yPosition: newYPosition });\r\n\r\n            this.props.update({\r\n                y: newYPosition,\r\n                x: this.props.xPosition\r\n            });\r\n        }\r\n        else {\r\n            // destroy instance by call aquarium's function\r\n            this.props.destroy();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { xPosition } = this.props;\r\n        const { yPosition, color } = this.state;\r\n\r\n        return (\r\n            <img\r\n                src={color.src}\r\n                alt=\"\"\r\n                className={[classes.Food, classes[color.class]].join(\" \")}\r\n                style={{ left: xPosition, top: yPosition }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval\r\n        clearInterval(this.movementInterval.interval);\r\n    }\r\n}\r\n\r\nFood.propTypes = {\r\n    xPosition: PropTypes.number\r\n};\r\n\r\nexport default Food;","import React from 'react';\r\n\r\nimport classes from './GithubIcon.module.css';\r\nexport default (props) => {\r\n    return(\r\n    <a target=\"_blank\" href={\"https://github.com/alonlevim/aquarium\"} className={classes.GithubIcon}>\r\n        {props.children}\r\n    </a>\r\n    )\r\n};","import React from 'react';\r\nimport Fish from '../fish/Fish';\r\nimport Food from '../food/Food';\r\nimport GithubIcon from '../githubIcon/GithubIcon';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Aquarium.module.css';\r\nimport LandSvg from '../../assets/land.svg';\r\nimport RocksSvg from '../../assets/rocks.svg';\r\nimport RockSvg from '../../assets/rock.svg';\r\nimport StandingSvg from '../../assets/standing.svg';\r\nimport Standing2Svg from '../../assets/standing2.svg';\r\nimport sunlightSvg from '../../assets/sunlight.svg';\r\nimport SeaKelpSvg from '../../assets/sea-kelp.svg';\r\nimport BlueShapeSvg from '../../assets/blue-shape.svg';\r\nimport BlueShape2Svg from '../../assets/blue-shape2.svg';\r\nimport GreenShapeSvg from '../../assets/green-shape.svg';\r\nimport GreenShape2Svg from '../../assets/green-shape2.svg';\r\nimport PurpleShapeSvg from '../../assets/purple-shape.svg';\r\nimport RedShapeSvg from '../../assets/red-shape.svg';\r\nimport BubbleSvg from '../../assets/bubble.svg';\r\nimport Rock2Svg from '../../assets/rock2.svg';\r\nimport { clearInterval } from 'timers';\r\n\r\n\r\nclass Aquarium extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            bubbles: {\r\n                current: 0,\r\n                list: new Array(50)\r\n            },\r\n            fish: {\r\n                count: 5,\r\n                list: []\r\n            },\r\n            food: {\r\n                instance: null,\r\n                slowDownTimeInMilliseconds: 25\r\n            },\r\n            rectAquarium: null\r\n        };\r\n\r\n        this.addBubbleInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: 250\r\n        };\r\n\r\n        this.borderRadius = 30;\r\n        this.scaleBubble = { min: 0.1, max: 1.5 };\r\n\r\n        this.foodPoint = null;\r\n\r\n        // When click on aquarium show one food\r\n        document.addEventListener(\"click\", this.handleClick);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.addBubbleToScreen();\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        // Check if there is no food in aquarium\r\n        if (!this.state.food.instance) {\r\n            // Check mouse clicked on this aquarium\r\n            const mousePoint = { x:event.pageX, y: event.pageY, width: 1, height: 1 };\r\n            const { rectAquarium } = this.state;\r\n\r\n            if( Utils.collisionDetection(mousePoint, rectAquarium) )\r\n            {\r\n                const food = { ...this.state.food };\r\n\r\n                food.instance = <Food\r\n                    xPosition={event.pageX - this.state.rectAquarium.x}\r\n                    destroy={this.destroyFood}\r\n                    rectAquarium={this.state.rectAquarium}\r\n                    init={this.state.food}\r\n                    update={this.updateFood}\r\n                />;\r\n    \r\n                this.setState({ food });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Remove food from state\r\n     */\r\n    destroyFood = () => {\r\n        const food = { ...this.state.food };\r\n        food.instance = this.foodPoint = null;\r\n\r\n        this.setState({ food });\r\n    };\r\n\r\n    addBubbleToScreen = () => {\r\n        this.addBubbleInterval.interval = setInterval(() => {\r\n            this.setState((state) => {\r\n                // New assign to object bubbles\r\n                const bubbles = { ...state.bubbles };\r\n\r\n                // If current find in last bubble in list\r\n                if (bubbles.current >= bubbles.list.length) {\r\n                    bubbles.current = 0;\r\n                }\r\n\r\n                // Get random point to instance bubble\r\n                const xPosition = Math.floor(Math.random() * window.innerWidth);\r\n                // Get random scale of bubble\r\n                const scale = (Math.random() + this.scaleBubble.min) * this.scaleBubble.max;\r\n\r\n                // Reset next bubble in list\r\n                bubbles.list[bubbles.current + 1 < bubbles.list.length ? bubbles.current + 1 : 0] = null;\r\n                // New assign bubble in current index in bubble list\r\n                bubbles.list[bubbles.current] = <img\r\n                    key={bubbles.current}\r\n                    src={BubbleSvg}\r\n                    alt=\"\"\r\n                    className={classes.Bubble}\r\n                    style={{ bottom: \"50px\", right: `${xPosition}px`, transform: `scale(${scale})` }}\r\n                />;\r\n                // Plus current index bubble\r\n                bubbles.current++;\r\n\r\n                // Update state\r\n                return { bubbles };\r\n            });\r\n        }, this.addBubbleInterval.timeInMilliseconds);\r\n    }\r\n\r\n    /**\r\n     * When food position changed, will update food point without state in this component\r\n     */\r\n    updateFood = (food) => {\r\n        this.foodPoint = food;\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of aquarium by reference React\r\n     */\r\n    getAquariumSizeInfo = (element) => {\r\n        // Check if aquarium detail overwrite at state\r\n        this.setState((state) => {\r\n            if (!state.rectAquarium) {\r\n\r\n                const elementAquarium = element.getBoundingClientRect();\r\n                const rectAquarium = {\r\n                    x: elementAquarium.x + this.borderRadius/2,\r\n                    y: elementAquarium.y + this.borderRadius/2,\r\n                    width: elementAquarium.width - this.borderRadius,\r\n                    height: elementAquarium.height - this.borderRadius\r\n                };\r\n\r\n                return { rectAquarium };\r\n            }\r\n            // Callback add fish on game\r\n        }, this.initInstanceFish());\r\n    }\r\n\r\n    initInstanceFish = () => {\r\n        this.setState((state) => {\r\n            const fish = { ...state.fish };\r\n\r\n            for (var i = 0; i < fish.count; i++) {\r\n                fish.list.push((index, rectAquarium) =>\r\n                    <Fish\r\n                        key={index}\r\n                        rectAquarium={rectAquarium}\r\n                        food={this.foodPoint}\r\n                        destroyFood={this.destroyFood}\r\n                    />);\r\n            }\r\n\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Aquarium}>\r\n                <div className={classes.Background} ref={this.getAquariumSizeInfo}>\r\n                    <GithubIcon />\r\n                    <img src={StandingSvg} alt=\"\" className={classes.Standing} />\r\n                    <img src={Standing2Svg} alt=\"\" className={classes.Standing2} />\r\n                    <img src={SeaKelpSvg} alt=\"\" className={classes.SeaKelp} />\r\n                    <img src={RockSvg} alt=\"\" className={classes.Rock} />\r\n                    <img src={RocksSvg} alt=\"\" className={classes.Rocks} />\r\n                    <img src={BlueShapeSvg} alt=\"\" className={classes.BlueShape} />\r\n                    <img src={BlueShape2Svg} alt=\"\" className={classes.BlueShape2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock3} />\r\n                    <img src={GreenShapeSvg} alt=\"\" className={classes.GreenShape} />\r\n                    <img src={GreenShape2Svg} alt=\"\" className={classes.GreenShape2} />\r\n                    <img src={PurpleShapeSvg} alt=\"\" className={classes.PurpleShape} />\r\n                    <img src={RedShapeSvg} alt=\"\" className={classes.RedShape} />\r\n                    {this.state.bubbles.list.map(item => item)}\r\n                    {this.state.food.instance}\r\n\r\n                    {this.state.fish.list.map((item, index) => item(index, this.state.rectAquarium))}\r\n\r\n                    <img src={LandSvg} alt=\"\" className={classes.Land} />\r\n                    <img src={sunlightSvg} alt=\"\" className={classes.Sunlight} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval and click event listener\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        clearInterval(this.addBubbleInterval.interval);\r\n    }\r\n}\r\n\r\nexport default Aquarium;","import React from 'react';\nimport Aquarium from './components/aquarium/Aquarium';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Aquarium />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}