{"version":3,"sources":["components/aquarium/Aquarium.module.css","components/food/Food.module.css","assets/rock2.svg","components/fish/Fish.module.css","assets/fish.svg","assets/yellow-food.svg","assets/green-food.svg","components/githubIcon/GithubIcon.module.css","assets/land.svg","assets/rocks.svg","assets/rock.svg","assets/standing.svg","assets/standing2.svg","assets/sunlight.svg","assets/sea-kelp.svg","assets/blue-shape.svg","assets/blue-shape2.svg","assets/green-shape.svg","assets/green-shape2.svg","assets/purple-shape.svg","assets/red-shape.svg","assets/bubble.svg","utils.js","components/fish/Fish.js","components/food/Food.js","components/githubIcon/GithubIcon.js","components/aquarium/Aquarium.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","distanceBetweenTwoPoints","point1","point2","Math","sqrt","pow","x","y","getAngleBetweenTwoPoints","atan2","PI","toFixed","randomPoint","maxPosition","sizeInfoFish","floor","random","width","height","calculateNextPoint","newX","newY","xDistance","yDistance","m","b","equationOfLinear","abs","collisionDetection","rect1","rect2","randomBetweenZeroAndOne","round","DIRECTION","RIGHT","LEFT","MAX_DISTANCE_TO_CHANGE_DIRECTION_AND_ANGLE","FOOD_LIMIT","MAX_FPS","FRAME_RATE_DEFAULT","FRAME_RATE_FOOD_MODE","Fish","props","init","CouldToBeIdle","foodPoint","state","Utils","idle","rectAquarium","maxPositionAquarium","tempTargetPoint","setState","move","frameRate","frameCount","targetPoint","fishPosition","angle","direction","nextPoint","newPosition","fishObject","targetObject","eatFood","window","requestAnimationFrame","idleTimeout","timeout","setTimeout","start","timeInMilliseconds","requestAnimationFrameStarted","destroyFood","size","getFishSizeInfo","element","default","getBoundingClientRect","this","food","oldState","ref","src","FishSvg","alt","className","classes","style","top","left","transform","clearTimeout","React","PureComponent","FOOD_COLOR","GREEN","GreenFoodSvg","class","YELLOW","YellowFoodSvg","Food","yPosition","newYPosition","update","xPosition","destroy","color","movementInterval","interval","setInterval","join","clearInterval","target","href","GithubIcon","children","BORDER_RADIUS","SCALE_BUBBLE","min","max","ESTIMATION","Aquarium","getAquariumSizeInfo","steps","addBubbleToScreen","handleClick","event","foodInstance","mousePoint","pageX","pageY","updateFood","handleResize","bubblesList","currentBubbles","length","innerWidth","scale","key","BubbleSvg","Bubble","bottom","right","elementAquarium","aquariumRef","current","numberOfFish","fishCount","initInstanceFish","fishList","i","push","index","Array","createRef","document","addEventListener","Background","StandingSvg","Standing","Standing2Svg","Standing2","SeaKelpSvg","SeaKelp","RockSvg","Rock","RocksSvg","Rocks","BlueShapeSvg","BlueShape","BlueShape2Svg","BlueShape2","Rock2Svg","Rock2","Rock3","GreenShapeSvg","GreenShape","GreenShape2Svg","GreenShape2","PurpleShapeSvg","PurpleShape","RedShapeSvg","RedShape","map","item","LandSvg","Land","sunlightSvg","Sunlight","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d386dd8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Aquarium\":\"Aquarium_Aquarium__tQejz\",\"Background\":\"Aquarium_Background__1tbqt\",\"Land\":\"Aquarium_Land__QSN87\",\"Rocks\":\"Aquarium_Rocks__sMIb_\",\"Rock\":\"Aquarium_Rock__1-ltl\",\"Standing\":\"Aquarium_Standing__1_yav\",\"Standing2\":\"Aquarium_Standing2__OR3a9\",\"Sunlight\":\"Aquarium_Sunlight__1rWP1\",\"SeaKelp\":\"Aquarium_SeaKelp__1stG2\",\"BlueShape\":\"Aquarium_BlueShape__1n1nb\",\"BlueShape2\":\"Aquarium_BlueShape2__3k8HL\",\"GreenShape\":\"Aquarium_GreenShape__1OwGD\",\"GreenShape2\":\"Aquarium_GreenShape2__3xz5W\",\"Rock2\":\"Aquarium_Rock2__1taqG\",\"Rock3\":\"Aquarium_Rock3__2z6G7\",\"PurpleShape\":\"Aquarium_PurpleShape__1PxV2\",\"RedShape\":\"Aquarium_RedShape__2NwmC\",\"Bubble\":\"Aquarium_Bubble__3PKjo\",\"moveBubble\":\"Aquarium_moveBubble__32zRN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Food\":\"Food_Food__3ZtMC\",\"yellow\":\"Food_yellow__1UZ4Q\",\"green\":\"Food_green__10WJz\"};","module.exports = __webpack_public_path__ + \"static/media/rock2.0c047bfc.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Fish\":\"Fish_Fish__1Z0ry\"};","module.exports = __webpack_public_path__ + \"static/media/fish.a6ec6b72.svg\";","module.exports = __webpack_public_path__ + \"static/media/yellow-food.0f938568.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-food.bf3ea358.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GithubIcon\":\"GithubIcon_GithubIcon__18cKc\"};","module.exports = __webpack_public_path__ + \"static/media/land.5010d4f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocks.8fa88985.svg\";","module.exports = __webpack_public_path__ + \"static/media/rock.771f0d0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing.7e075853.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing2.aa55cd6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunlight.5ec30dde.svg\";","module.exports = __webpack_public_path__ + \"static/media/sea-kelp.38be889c.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape.40d840ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape2.15d7a192.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape.0baeed56.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape2.80a36b2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/purple-shape.afc4ef84.svg\";","module.exports = __webpack_public_path__ + \"static/media/red-shape.8d493c82.svg\";","module.exports = __webpack_public_path__ + \"static/media/bubble.69126146.svg\";","/**\r\n * Calculate equation of linear by 2 different points.\r\n * return m (slope) and b\r\n */\r\nexport const equationOfLinear = (point1, point2) => {\r\n    const xDistance = point1.x - point2.x;\r\n    const yDistance = point1.y - point2.y;\r\n\r\n    const m = xDistance !== 0 ? (yDistance / xDistance) : 0;\r\n    const b = point1.y - (m * point1.x);\r\n\r\n    return { m, b };\r\n};\r\n\r\n/**\r\n * Return distance between 2 different points.\r\n */\r\nexport const distanceBetweenTwoPoints = (point1, point2) => {\r\n    return Math.sqrt(Math.pow((point2.x - point1.x), 2) + Math.pow((point2.y - point1.y), 2));\r\n};\r\n\r\n/**\r\n * Return angle between 2 different points.\r\n */\r\nexport const getAngleBetweenTwoPoints = (point1, point2) => {\r\n    return (Math.atan2(point2.y - point1.y, point2.x - point1.x) * 180 / Math.PI).toFixed(3);\r\n};\r\n\r\n/**\r\n * Return random point that between 0 to max position of aquarium minus fish size.\r\n */\r\nexport const randomPoint = (maxPosition, sizeInfoFish) => {\r\n    return {\r\n        x: Math.floor(Math.random() * (maxPosition.x - sizeInfoFish.width)),\r\n        y: Math.floor(Math.random() * (maxPosition.y - sizeInfoFish.height))\r\n    };\r\n};\r\n\r\n/**\r\n * Return next point on linear equation, advanced by plus pixel\r\n */\r\nexport const calculateNextPoint = (point1, point2) => {\r\n    // Get b and m (slope)\r\n    const { m, b } = equationOfLinear(point1, point2);\r\n\r\n    // Calculate distance on axios\r\n    const dx = Math.abs(point1.x - point2.x);\r\n    const dy = Math.abs(point1.y - point2.y);\r\n\r\n    let newX;\r\n    let newY;\r\n    // If distance x bigger than distance y, changing x position and accordingly changing y position\r\n    if (dx > dy) {\r\n        // If x of point1 is smaller from x point2\r\n        if (point1.x < point2.x) {\r\n            // Add pixel at x axios\r\n            newX = point1.x + 2;\r\n        }\r\n        else {\r\n            // Less pixel at x axios\r\n            newX = point1.x - 2;\r\n        }\r\n\r\n        // Calculate y position by new x position\r\n        newY = m * newX + b;\r\n    }\r\n    else {\r\n        // If y of point1 is smaller from y point2\r\n        if (point1.y < point2.y) {\r\n            // Add pixel at y axios\r\n            newY = point1.y + 2;\r\n        }\r\n        else {\r\n            // Less pixel at y axios\r\n            newY = point1.y - 2;\r\n        }\r\n\r\n        // Calculate x position by new y position, if m is 0 then copy value for old x point2\r\n        newX = m !== 0 ? (newY - b) / m : point2.x;\r\n    }\r\n\r\n    return {\r\n        x: newX,\r\n        y: newY\r\n    }\r\n};\r\n\r\n/**\r\n * Check if 2 different objects collision each other\r\n */\r\nexport const collisionDetection = (rect1, rect2) => {\r\n    return (rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y)\r\n}\r\n\r\n/**\r\n * Return zero or one by random math function\r\n */\r\nexport const randomBetweenZeroAndOne = () => {\r\n    return Math.round( Math.random() );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Fish.module.css';\r\nimport FishSvg from '../../assets/fish.svg';\r\n\r\nconst DIRECTION = {\r\n    RIGHT: \"right\",\r\n    LEFT: \"left\"\r\n};\r\n\r\nconst MAX_DISTANCE_TO_CHANGE_DIRECTION_AND_ANGLE = 10;\r\nconst INCREASE_THE_FISH_BY = 5;\r\nconst FOOD_LIMIT = 20;\r\n// Frames\r\nconst MAX_FPS = 60;\r\nconst FRAME_RATE_DEFAULT = 24;\r\nconst FRAME_RATE_FOOD_MODE = (MAX_FPS - 15);\r\n\r\nclass Fish extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Max Aquarium point on screen\r\n        const maxPositionAquarium = {\r\n            x: props.rectAquarium.width,\r\n            y: props.rectAquarium.height\r\n        };\r\n\r\n        this.state = {\r\n            size: 0,\r\n            fishPosition: Utils.randomPoint(maxPositionAquarium, { width: 30, height: 30 }),\r\n            direction: DIRECTION.LEFT,\r\n            angle: 0,\r\n            frameRate: FRAME_RATE_DEFAULT,\r\n            rectAquarium: {\r\n                width: 60,\r\n                height: 50,\r\n                default: true\r\n            },\r\n            foodPoint: null,\r\n            move: false,\r\n        };\r\n\r\n        // Idle fish\r\n        this.idleTimeout = {\r\n            timeout: null,\r\n            timeInMilliseconds: 1000\r\n        };\r\n\r\n        this.frameCount = 0;\r\n        this.tempTargetPoint = null;\r\n        this.requestAnimationFrameStarted = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.start();\r\n    }\r\n\r\n    componentDidUpdate(props, state) {\r\n        // There is food or after the food destroyed\r\n        if (props.food || state.foodPoint) {\r\n            this.setState((oldState) => {\r\n                let { foodPoint, frameRate } = { ...oldState };\r\n                // Update food point\r\n                foodPoint = props.food;\r\n                // Speed fish change to be fast fish if have food or default if there is no\r\n                frameRate = props.food ? FRAME_RATE_FOOD_MODE : FRAME_RATE_DEFAULT;\r\n\r\n                return { foodPoint, frameRate };\r\n            }, this.start);\r\n        }\r\n    }\r\n\r\n    init = (CouldToBeIdle = true) => {\r\n        const { foodPoint } = this.state;\r\n\r\n        // Selects by random starting idle mode or move mode\r\n        if (foodPoint === null && CouldToBeIdle && Utils.randomBetweenZeroAndOne() === 1)\r\n            return this.idle();\r\n\r\n        // Get target random point that fish will move\r\n        const { rectAquarium } = this.props;\r\n        const maxPositionAquarium = {\r\n            x: rectAquarium.width,\r\n            y: rectAquarium.height\r\n        };\r\n\r\n        this.tempTargetPoint = Utils.randomPoint(maxPositionAquarium, this.state.rectAquarium);\r\n\r\n        // start move\r\n        this.setState({ move: true });\r\n    }\r\n\r\n    move = () => {\r\n        const { move, frameRate } = this.state;\r\n\r\n        this.frameCount++;\r\n\r\n        // Start move fish to target point,\r\n        // stop when fish collision with target point\r\n        // then call to idle function\r\n        if (move && this.frameCount >= Math.round(MAX_FPS / frameRate)) {\r\n            // Check if there is food on screen\r\n            // The target point will be food\r\n            // Else random target point\r\n            const targetPoint = this.state.foodPoint || this.tempTargetPoint;\r\n\r\n            const { fishPosition } = this.state;\r\n            let { angle, direction } = this.state;\r\n\r\n            // The next point fish will move in this step to target point\r\n            const nextPoint = Utils.calculateNextPoint(fishPosition, targetPoint);\r\n            // Distance between fish and target point\r\n            const distance = Utils.distanceBetweenTwoPoints(fishPosition, targetPoint);\r\n\r\n            // Making sure the direction and angle not change when the distance in less 2 digital\r\n            if (distance > MAX_DISTANCE_TO_CHANGE_DIRECTION_AND_ANGLE) {\r\n                direction = fishPosition.x < nextPoint.x ? DIRECTION.RIGHT : DIRECTION.LEFT;\r\n                // Angle\r\n                angle = Utils.getAngleBetweenTwoPoints(fishPosition, nextPoint) - 180;\r\n            }\r\n\r\n            const newPosition = {\r\n                x: nextPoint.x,\r\n                y: nextPoint.y\r\n            };\r\n\r\n            // Update state\r\n            this.setState({ fishPosition: newPosition, direction, angle });\r\n\r\n            // For check collision detection between fish and target point\r\n            const fishObject = { ...newPosition, width: this.state.rectAquarium.width, height: this.state.rectAquarium.height };\r\n            const targetObject = { ...targetPoint, width: 1, height: 1 };\r\n            // Check if there is collision between fish and target point\r\n            if (Utils.collisionDetection(fishObject, targetObject)) {\r\n                // Disable next run\r\n                this.setState({ move: false });\r\n\r\n                // If the target is food\r\n                if (this.state.foodPoint) {\r\n                    this.eatFood();\r\n                }\r\n                else {\r\n                    this.idle();\r\n                }\r\n            }\r\n\r\n            this.frameCount = 0;\r\n        }\r\n\r\n        window.requestAnimationFrame(this.move);\r\n    };\r\n\r\n    idle = () => {\r\n        this.setState({ move: false });\r\n        this.idleTimeout.timeout = setTimeout(\r\n            // Call to callback after x time\r\n            () => {\r\n                this.start(false);\r\n            },\r\n            this.idleTimeout.timeInMilliseconds);\r\n    };\r\n\r\n    start = (CouldToBeIdle) => {\r\n        this.init(CouldToBeIdle);\r\n\r\n        if (!this.requestAnimationFrameStarted) {\r\n            this.requestAnimationFrameStarted = true;\r\n            window.requestAnimationFrame(this.move);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When have collision fish with food, then destroy food\r\n     */\r\n    eatFood = () => {\r\n        this.props.destroyFood();\r\n        // Increase fish size\r\n        if (this.state.size < FOOD_LIMIT)\r\n            this.setState({ size: this.state.size + 1 });\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of fish by reference React\r\n     */\r\n    getFishSizeInfo = (element) => {\r\n        // Check if fish detail overwrite at state\r\n        if (this.state.rectAquarium.default) {\r\n            const rectAquarium = element.getBoundingClientRect();\r\n            rectAquarium.default = false;\r\n\r\n            this.setState({ rectAquarium })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fishPosition, rectAquarium, angle, size, direction } = this.state;\r\n\r\n        return (\r\n            <img\r\n                ref={this.getFishSizeInfo}\r\n                src={FishSvg}\r\n                alt=\"\"\r\n                className={classes.Fish}\r\n                style={\r\n                    {\r\n                        width: rectAquarium.width + (size * INCREASE_THE_FISH_BY),\r\n                        height: rectAquarium.height + (size * INCREASE_THE_FISH_BY),\r\n                        top: fishPosition.y,\r\n                        left: fishPosition.x,\r\n                        transform: `\r\n                        rotate(${angle}deg)\r\n                        scaleY(${direction === DIRECTION.RIGHT ? -1 : 1})\r\n                        `\r\n                    }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear timeout\r\n        clearTimeout(this.idleTimeout.timeout);\r\n    }\r\n}\r\n\r\nFish.propTypes = {\r\n    food: PropTypes.object,\r\n    rectAquarium: PropTypes.object,\r\n    destroyFood: PropTypes.func\r\n}\r\n\r\nexport default Fish;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Food.module.css';\r\nimport YellowFoodSvg from '../../assets/yellow-food.svg';\r\nimport GreenFoodSvg from '../../assets/green-food.svg';\r\n\r\nconst FOOD_COLOR = {\r\n    GREEN: {\r\n        src: GreenFoodSvg,\r\n        class: 'green'\r\n    },\r\n    YELLOW: {\r\n        src: YellowFoodSvg,\r\n        class: 'yellow'\r\n    }\r\n};\r\n\r\nclass Food extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            yPosition: 0,\r\n            color: Utils.randomBetweenZeroAndOne() ? FOOD_COLOR.GREEN : FOOD_COLOR.YELLOW\r\n        };\r\n\r\n        this.movementInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: 25\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.movementInterval.interval = setInterval(\r\n            this.move,\r\n            this.movementInterval.timeInMilliseconds\r\n        );\r\n    }\r\n\r\n    move = () => {\r\n        // Check if food at aquarium by y axios\r\n        if (this.props.rectAquarium.height > this.state.yPosition) {\r\n            const newYPosition = this.state.yPosition + 1;\r\n\r\n            this.setState({ yPosition: newYPosition });\r\n\r\n            this.props.update({\r\n                y: newYPosition,\r\n                x: this.props.xPosition\r\n            });\r\n        }\r\n        else {\r\n            // destroy instance by call aquarium's function\r\n            this.props.destroy();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { xPosition } = this.props;\r\n        const { yPosition, color } = this.state;\r\n\r\n        return (\r\n            <img\r\n                src={color.src}\r\n                alt=\"\"\r\n                className={[classes.Food, classes[color.class]].join(\" \")}\r\n                style={{ left: xPosition, top: yPosition }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval\r\n        clearInterval(this.movementInterval.interval);\r\n    }\r\n}\r\n\r\nFood.propTypes = {\r\n    xPosition: PropTypes.number\r\n};\r\n\r\nexport default Food;","import React from 'react';\r\n\r\nimport classes from './GithubIcon.module.css';\r\nexport default (props) => {\r\n    return(\r\n    <a target=\"_blank\" href={\"https://github.com/alonlevim/aquarium\"} className={classes.GithubIcon}>\r\n        {props.children}\r\n    </a>\r\n    )\r\n};","import React from 'react';\r\nimport Fish from '../fish/Fish';\r\nimport Food from '../food/Food';\r\nimport GithubIcon from '../githubIcon/GithubIcon';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Aquarium.module.css';\r\nimport LandSvg from '../../assets/land.svg';\r\nimport RocksSvg from '../../assets/rocks.svg';\r\nimport RockSvg from '../../assets/rock.svg';\r\nimport StandingSvg from '../../assets/standing.svg';\r\nimport Standing2Svg from '../../assets/standing2.svg';\r\nimport sunlightSvg from '../../assets/sunlight.svg';\r\nimport SeaKelpSvg from '../../assets/sea-kelp.svg';\r\nimport BlueShapeSvg from '../../assets/blue-shape.svg';\r\nimport BlueShape2Svg from '../../assets/blue-shape2.svg';\r\nimport GreenShapeSvg from '../../assets/green-shape.svg';\r\nimport GreenShape2Svg from '../../assets/green-shape2.svg';\r\nimport PurpleShapeSvg from '../../assets/purple-shape.svg';\r\nimport RedShapeSvg from '../../assets/red-shape.svg';\r\nimport BubbleSvg from '../../assets/bubble.svg';\r\nimport Rock2Svg from '../../assets/rock2.svg';\r\n\r\nconst BORDER_RADIUS = 30;\r\nconst SCALE_BUBBLE = { min: 0.1, max: 1.5 };\r\n// Frames\r\nconst MAX_FPS = 60;\r\nconst FRAME_RATE = 1.5;\r\nconst ESTIMATION = Math.round(MAX_FPS / FRAME_RATE);\r\n\r\nclass Aquarium extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentBubbles: 0,\r\n            bubblesList: new Array(50),\r\n            fishCount: 0,\r\n            fishList: [],\r\n            foodInstance: null,\r\n            rectAquarium: null\r\n        };\r\n\r\n        this.aquariumRef = React.createRef();\r\n\r\n        this.foodPoint = null;\r\n\r\n        this.frameCount = 0;\r\n        this.requestAnimationFrameStarted = false;\r\n\r\n        // When click on aquarium show one food\r\n        document.addEventListener(\"click\", this.handleClick);\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.start();\r\n    }\r\n\r\n    start = () => {\r\n        this.getAquariumSizeInfo();\r\n        this.steps();\r\n\r\n        if (!this.requestAnimationFrameStarted) {\r\n            this.requestAnimationFrameStarted = true;\r\n            window.requestAnimationFrame(this.steps);\r\n        }\r\n    }\r\n\r\n    steps = () => {\r\n        this.frameCount++;\r\n\r\n        if (this.frameCount >= ESTIMATION) {\r\n            this.addBubbleToScreen();\r\n            this.frameCount = 0;\r\n        }\r\n\r\n        window.requestAnimationFrame(this.steps);\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        // Check if there is no food in aquarium\r\n        if (!this.state.foodInstance) {\r\n            // Check mouse clicked on this aquarium\r\n            const mousePoint = { x: event.pageX, y: event.pageY, width: 1, height: 1 };\r\n            const { rectAquarium } = this.state;\r\n\r\n            if (Utils.collisionDetection(mousePoint, rectAquarium)) {\r\n                const foodInstance = <Food\r\n                    xPosition={event.pageX - this.state.rectAquarium.x}\r\n                    destroy={this.destroyFood}\r\n                    rectAquarium={this.state.rectAquarium}\r\n                    update={this.updateFood}\r\n                />;\r\n\r\n                this.setState({ foodInstance });\r\n            }\r\n        }\r\n    };\r\n\r\n    handleResize = (event) => {\r\n        this.getAquariumSizeInfo();\r\n    };\r\n\r\n    /**\r\n     * Remove food from state\r\n     */\r\n    destroyFood = () => {\r\n        // Clear food point\r\n        this.foodPoint = null;\r\n        this.setState({ foodInstance: null });\r\n    };\r\n\r\n    addBubbleToScreen = () => {\r\n        this.setState((state) => {\r\n            // New assign to object bubbles\r\n            const { bubblesList } = state;\r\n            let { currentBubbles } = state;\r\n\r\n            // If current find in last bubble in list\r\n            if (currentBubbles >= bubblesList.length) {\r\n                currentBubbles = 0;\r\n            }\r\n\r\n            // Get random point to instance bubble\r\n            const xPosition = Math.floor(Math.random() * window.innerWidth);\r\n            // Get random scale of bubble\r\n            const scale = (Math.random() + SCALE_BUBBLE.min) * SCALE_BUBBLE.max;\r\n\r\n            // Reset next bubble in list\r\n            bubblesList[currentBubbles + 1 < bubblesList.length ? currentBubbles + 1 : 0] = null;\r\n            // New assign bubble in current index in bubble list\r\n            bubblesList[currentBubbles] = <img\r\n                key={currentBubbles}\r\n                src={BubbleSvg}\r\n                alt=\"\"\r\n                className={classes.Bubble}\r\n                style={{ bottom: \"3%\", right: `${xPosition}px`, transform: `scale(${scale})` }}\r\n            />;\r\n            // Plus current index bubble\r\n            currentBubbles++;\r\n\r\n            // Update state\r\n            return { bubblesList, currentBubbles };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * When food position changed, will update food point without state in this component\r\n     */\r\n    updateFood = (food) => {\r\n        this.foodPoint = food;\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of aquarium by reference React\r\n     */\r\n    getAquariumSizeInfo = () => {\r\n        // Check if aquarium detail override at state\r\n        const elementAquarium = this.aquariumRef.current.getBoundingClientRect();\r\n        const rectAquarium = {\r\n            x: elementAquarium.x + BORDER_RADIUS / 2,\r\n            y: elementAquarium.y + BORDER_RADIUS / 2,\r\n            width: elementAquarium.width - BORDER_RADIUS,\r\n            height: elementAquarium.height - BORDER_RADIUS\r\n        };\r\n\r\n        const numberOfFish = elementAquarium.width < 1000 ? 2 : 5;\r\n        this.setState({ rectAquarium, fishCount: numberOfFish }\r\n            // Callback add fish on game\r\n            , this.initInstanceFish);\r\n    }\r\n\r\n    initInstanceFish = () => {\r\n        const { fishCount, fishList } = this.state;\r\n        if (fishList.length === 0) {\r\n            for (var i = 0; i < fishCount; i++) {\r\n                fishList.push((index, rectAquarium) =>\r\n                    <Fish\r\n                        key={index}\r\n                        rectAquarium={rectAquarium}\r\n                        food={this.foodPoint}\r\n                        destroyFood={this.destroyFood}\r\n                    />);\r\n            }\r\n\r\n            this.setState({ fishList });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Aquarium}>\r\n                <GithubIcon />\r\n                <div className={classes.Background} ref={this.aquariumRef}>\r\n                    <img src={StandingSvg} alt=\"\" className={classes.Standing} />\r\n                    <img src={Standing2Svg} alt=\"\" className={classes.Standing2} />\r\n                    <img src={SeaKelpSvg} alt=\"\" className={classes.SeaKelp} />\r\n                    <img src={RockSvg} alt=\"\" className={classes.Rock} />\r\n                    <img src={RocksSvg} alt=\"\" className={classes.Rocks} />\r\n                    <img src={BlueShapeSvg} alt=\"\" className={classes.BlueShape} />\r\n                    <img src={BlueShape2Svg} alt=\"\" className={classes.BlueShape2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock3} />\r\n                    <img src={GreenShapeSvg} alt=\"\" className={classes.GreenShape} />\r\n                    <img src={GreenShape2Svg} alt=\"\" className={classes.GreenShape2} />\r\n                    <img src={PurpleShapeSvg} alt=\"\" className={classes.PurpleShape} />\r\n                    <img src={RedShapeSvg} alt=\"\" className={classes.RedShape} />\r\n                    {this.state.bubblesList.map(item => item)}\r\n                    {this.state.foodInstance}\r\n                    {this.state.fishList.map((item, index) => item(index, this.state.rectAquarium))}\r\n                    <img src={LandSvg} alt=\"\" className={classes.Land} />\r\n                    <img src={sunlightSvg} alt=\"\" className={classes.Sunlight} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will click event listener\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        document.removeEventListener(\"resize\", this.handleResize);\r\n    }\r\n}\r\n\r\nexport default Aquarium;","import React from 'react';\r\nimport Aquarium from './components/aquarium/Aquarium';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Aquarium />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}