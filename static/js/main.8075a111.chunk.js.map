{"version":3,"sources":["components/aquarium/Aquarium.module.css","components/food/Food.module.css","assets/rock2.svg","components/fish/Fish.module.css","assets/fish.svg","assets/yellow-food.svg","assets/green-food.svg","components/githubIcon/GithubIcon.module.css","assets/land.svg","assets/rocks.svg","assets/rock.svg","assets/standing.svg","assets/standing2.svg","assets/sunlight.svg","assets/sea-kelp.svg","assets/blue-shape.svg","assets/blue-shape2.svg","assets/green-shape.svg","assets/green-shape2.svg","assets/purple-shape.svg","assets/red-shape.svg","assets/bubble.svg","utils.js","components/fish/Fish.js","components/food/Food.js","components/githubIcon/GithubIcon.js","components/aquarium/Aquarium.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","distanceBetweenTwoPoints","point1","point2","Math","sqrt","pow","x","y","getAngleBetweenTwoPoints","atan2","PI","toFixed","randomPoint","maxPosition","sizeInfoFish","floor","random","width","height","calculateNextPoint","newX","newY","xDistance","yDistance","m","b","equationOfLinear","abs","collisionDetection","rect1","rect2","randomBetweenZeroAndOne","round","DIRECTION","RIGHT","LEFT","maxDistanceToChangeDirectionAndAngle","foodLimit","Fish","props","move","clearInterval","movementInterval","interval","rectAquarium","maxPositionAquarium","tempTargetPoint","Utils","state","setInterval","targetPoint","foodPoint","fishPosition","angle","direction","nextPoint","newPosition","setState","fishObject","targetObject","eatFood","idle","speed","idleTimeout","timeout","setTimeout","timeInMilliseconds","destroyFood","size","getFishSizeInfo","element","default","getBoundingClientRect","defaultTimeInMilliseconds","this","food","oldState","ref","src","FishSvg","alt","className","classes","style","top","left","transform","clearTimeout","React","PureComponent","FOOD_COLOR","GREEN","GreenFoodSvg","class","YELLOW","YellowFoodSvg","Food","yPosition","newYPosition","update","xPosition","destroy","color","join","target","href","GithubIcon","children","borderRadius","scaleBubble","min","max","Aquarium","handleClick","event","foodInstance","mousePoint","pageX","pageY","updateFood","handleResize","getAquariumSizeInfo","addBubbleToScreen","addBubbleInterval","bubblesList","currentBubbles","length","window","innerWidth","scale","key","BubbleSvg","Bubble","bottom","right","elementAquarium","aquariumRef","current","numberOfFish","fishCount","initInstanceFish","fishList","i","push","index","Array","createRef","document","addEventListener","Background","StandingSvg","Standing","Standing2Svg","Standing2","SeaKelpSvg","SeaKelp","RockSvg","Rock","RocksSvg","Rocks","BlueShapeSvg","BlueShape","BlueShape2Svg","BlueShape2","Rock2Svg","Rock2","Rock3","GreenShapeSvg","GreenShape","GreenShape2Svg","GreenShape2","PurpleShapeSvg","PurpleShape","RedShapeSvg","RedShape","map","item","LandSvg","Land","sunlightSvg","Sunlight","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8075a111.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Aquarium\":\"Aquarium_Aquarium__tQejz\",\"Background\":\"Aquarium_Background__1tbqt\",\"Land\":\"Aquarium_Land__QSN87\",\"Rocks\":\"Aquarium_Rocks__sMIb_\",\"Rock\":\"Aquarium_Rock__1-ltl\",\"Standing\":\"Aquarium_Standing__1_yav\",\"Standing2\":\"Aquarium_Standing2__OR3a9\",\"Sunlight\":\"Aquarium_Sunlight__1rWP1\",\"SeaKelp\":\"Aquarium_SeaKelp__1stG2\",\"BlueShape\":\"Aquarium_BlueShape__1n1nb\",\"BlueShape2\":\"Aquarium_BlueShape2__3k8HL\",\"GreenShape\":\"Aquarium_GreenShape__1OwGD\",\"GreenShape2\":\"Aquarium_GreenShape2__3xz5W\",\"Rock2\":\"Aquarium_Rock2__1taqG\",\"Rock3\":\"Aquarium_Rock3__2z6G7\",\"PurpleShape\":\"Aquarium_PurpleShape__1PxV2\",\"RedShape\":\"Aquarium_RedShape__2NwmC\",\"Bubble\":\"Aquarium_Bubble__3PKjo\",\"moveBubble\":\"Aquarium_moveBubble__32zRN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Food\":\"Food_Food__3ZtMC\",\"yellow\":\"Food_yellow__1UZ4Q\",\"green\":\"Food_green__10WJz\"};","module.exports = __webpack_public_path__ + \"static/media/rock2.0c047bfc.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Fish\":\"Fish_Fish__1Z0ry\"};","module.exports = __webpack_public_path__ + \"static/media/fish.a6ec6b72.svg\";","module.exports = __webpack_public_path__ + \"static/media/yellow-food.0f938568.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-food.bf3ea358.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GithubIcon\":\"GithubIcon_GithubIcon__18cKc\"};","module.exports = __webpack_public_path__ + \"static/media/land.5010d4f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocks.8fa88985.svg\";","module.exports = __webpack_public_path__ + \"static/media/rock.771f0d0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing.7e075853.svg\";","module.exports = __webpack_public_path__ + \"static/media/standing2.aa55cd6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunlight.5ec30dde.svg\";","module.exports = __webpack_public_path__ + \"static/media/sea-kelp.38be889c.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape.40d840ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-shape2.15d7a192.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape.0baeed56.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-shape2.80a36b2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/purple-shape.afc4ef84.svg\";","module.exports = __webpack_public_path__ + \"static/media/red-shape.8d493c82.svg\";","module.exports = __webpack_public_path__ + \"static/media/bubble.69126146.svg\";","/**\r\n * Calculate equation of linear by 2 different points.\r\n * return m (slope) and b\r\n */\r\nexport const equationOfLinear = (point1, point2) => {\r\n    const xDistance = point1.x - point2.x;\r\n    const yDistance = point1.y - point2.y;\r\n\r\n    const m = xDistance !== 0 ? (yDistance / xDistance) : 0;\r\n    const b = point1.y - (m * point1.x);\r\n\r\n    return { m, b };\r\n};\r\n\r\n/**\r\n * Return distance between 2 different points.\r\n */\r\nexport const distanceBetweenTwoPoints = (point1, point2) => {\r\n    return Math.sqrt(Math.pow((point2.x - point1.x), 2) + Math.pow((point2.y - point1.y), 2));\r\n};\r\n\r\n/**\r\n * Return angle between 2 different points.\r\n */\r\nexport const getAngleBetweenTwoPoints = (point1, point2) => {\r\n    return (Math.atan2(point2.y - point1.y, point2.x - point1.x) * 180 / Math.PI).toFixed(3);\r\n};\r\n\r\n/**\r\n * Return random point that between 0 to max position of aquarium minus fish size.\r\n */\r\nexport const randomPoint = (maxPosition, sizeInfoFish) => {\r\n    return {\r\n        x: Math.floor(Math.random() * (maxPosition.x - sizeInfoFish.width)),\r\n        y: Math.floor(Math.random() * (maxPosition.y - sizeInfoFish.height))\r\n    };\r\n};\r\n\r\n/**\r\n * Return next point on linear equation, advanced by plus pixel\r\n */\r\nexport const calculateNextPoint = (point1, point2) => {\r\n    // Get b and m (slope)\r\n    const { m, b } = equationOfLinear(point1, point2);\r\n\r\n    // Calculate distance on axios\r\n    const dx = Math.abs(point1.x - point2.x);\r\n    const dy = Math.abs(point1.y - point2.y);\r\n\r\n    let newX;\r\n    let newY;\r\n    // If distance x bigger than distance y, changing x position and accordingly changing y position\r\n    if (dx > dy) {\r\n        // If x of point1 is smaller from x point2\r\n        if (point1.x < point2.x) {\r\n            // Add pixel at x axios\r\n            newX = point1.x + 1;\r\n        }\r\n        else {\r\n            // Less pixel at x axios\r\n            newX = point1.x - 1;\r\n        }\r\n\r\n        // Calculate y position by new x position\r\n        newY = m * newX + b;\r\n    }\r\n    else {\r\n        // If y of point1 is smaller from y point2\r\n        if (point1.y < point2.y) {\r\n            // Add pixel at y axios\r\n            newY = point1.y + 1;\r\n        }\r\n        else {\r\n            // Less pixel at y axios\r\n            newY = point1.y - 1;\r\n        }\r\n\r\n        // Calculate x position by new y position, if m is 0 then copy value for old x point2\r\n        newX = m !== 0 ? (newY - b) / m : point2.x;\r\n    }\r\n\r\n    return {\r\n        x: newX,\r\n        y: newY\r\n    }\r\n};\r\n\r\n/**\r\n * Check if 2 different objects collision each other\r\n */\r\nexport const collisionDetection = (rect1, rect2) => {\r\n    return (rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y)\r\n}\r\n\r\n/**\r\n * Return zero or one by random math function\r\n */\r\nexport const randomBetweenZeroAndOne = () => {\r\n    return Math.round( Math.random() );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Fish.module.css';\r\nimport FishSvg from '../../assets/fish.svg';\r\n\r\nconst DIRECTION = {\r\n    RIGHT: \"right\",\r\n    LEFT: \"left\"\r\n};\r\n\r\nconst maxDistanceToChangeDirectionAndAngle = 10;\r\nconst increaseTheFishBy = 5;\r\nconst foodLimit = 20;\r\n\r\nclass Fish extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Max Aquarium point on screen\r\n        const maxPositionAquarium = {\r\n            x: props.rectAquarium.width,\r\n            y: props.rectAquarium.height\r\n        };\r\n\r\n        // Movement fish\r\n        this.movementInterval = {\r\n            interval: null,\r\n            defaultTimeInMilliseconds: 15\r\n        };\r\n\r\n        this.state = {\r\n            size: 0,\r\n            fishPosition: Utils.randomPoint(maxPositionAquarium, { width: 30, height: 30 }),\r\n            direction: DIRECTION.LEFT,\r\n            angle: 0,\r\n            speed: this.movementInterval.defaultTimeInMilliseconds,\r\n            rectAquarium: {\r\n                width: 60,\r\n                height: 50,\r\n                default: true\r\n            },\r\n            foodPoint: null\r\n        };\r\n\r\n        // Idle fish\r\n        this.idleTimeout = {\r\n            timeout: null,\r\n            timeInMilliseconds: 1000\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // Selects by random starting idle mode or move mode\r\n        if (Utils.randomBetweenZeroAndOne() === 1)\r\n            this.idle();\r\n        else {\r\n            this.move();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(props, state) {\r\n        // There is food or after the food destroyed\r\n        if (props.food || state.foodPoint) {\r\n            this.setState((oldState) => {\r\n                let { foodPoint, speed } = { ...oldState };\r\n                // Update food point\r\n                foodPoint = props.food;\r\n                // Speed fish change to be fast fish if have food or default if there is no\r\n                speed = props.food ? 1 : this.movementInterval.defaultTimeInMilliseconds;\r\n\r\n                return { foodPoint, speed };\r\n            }, this.move);\r\n        }\r\n    }\r\n\r\n    move = () => {\r\n        // Disable move interval if there is\r\n        clearInterval(this.movementInterval.interval);\r\n        // Get target random point that fish will move\r\n        const { rectAquarium } = this.props;\r\n        const maxPositionAquarium = {\r\n            x: rectAquarium.width,\r\n            y: rectAquarium.height\r\n        };\r\n        let tempTargetPoint = Utils.randomPoint(maxPositionAquarium, this.state.rectAquarium);\r\n\r\n        // Start move fish to target point,\r\n        // stop when fish collision with target point\r\n        // then call to idle function\r\n        this.movementInterval.interval = setInterval(() => {\r\n            // Check if there is food on screen\r\n            // The target point will be food point if there is in aquarium\r\n            // Else temp target point\r\n            const targetPoint = this.state.foodPoint || tempTargetPoint;\r\n\r\n            const { fishPosition } = this.state;\r\n            let { angle, direction } = this.state;\r\n\r\n            // The next point fish will move in this run interval to target point\r\n            const nextPoint = Utils.calculateNextPoint(fishPosition, targetPoint);\r\n            // Distance between fish and target point\r\n            const distance = Utils.distanceBetweenTwoPoints(fishPosition, targetPoint);\r\n\r\n            // Making sure the direction and angle not change when the distance in less 2 digital\r\n            if (distance > maxDistanceToChangeDirectionAndAngle) {\r\n                direction = fishPosition.x < nextPoint.x ? DIRECTION.RIGHT : DIRECTION.LEFT;\r\n                // Angle\r\n                angle = Utils.getAngleBetweenTwoPoints(fishPosition, nextPoint) - 180;\r\n            }\r\n\r\n            const newPosition = {\r\n                x: nextPoint.x,\r\n                y: nextPoint.y\r\n            };\r\n\r\n            // Update state\r\n            this.setState({ fishPosition: newPosition, direction, angle });\r\n\r\n            // For check collision detection between fish and target point\r\n            const fishObject = { ...newPosition, width: this.state.rectAquarium.width, height: this.state.rectAquarium.height };\r\n            const targetObject = { ...targetPoint, width: 1, height: 1 };\r\n            // Check if there is collision between fish and target point\r\n            if (Utils.collisionDetection(fishObject, targetObject)) {\r\n                // Disable next run\r\n                clearInterval(this.movementInterval.interval);\r\n\r\n                // If the target is food\r\n                if (this.state.foodPoint) {\r\n                    this.eatFood();\r\n                }\r\n                else {\r\n                    this.idle();\r\n                }\r\n            }\r\n        }, this.state.speed);\r\n    };\r\n\r\n    idle = () => {\r\n        this.idleTimeout.timeout = setTimeout(\r\n            // Call to callback after x time\r\n            this.move,\r\n            this.idleTimeout.timeInMilliseconds);\r\n    };\r\n\r\n    /**\r\n     * When have collision fish with food, then destroy food\r\n     */\r\n    eatFood = () => {\r\n        this.props.destroyFood();\r\n        // Increase fish size\r\n        if( this.state.size < foodLimit )\r\n            this.setState({ size: this.state.size + 1 });\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of fish by reference React\r\n     */\r\n    getFishSizeInfo = (element) => {\r\n        // Check if fish detail overwrite at state\r\n        if (this.state.rectAquarium.default) {\r\n            const rectAquarium = element.getBoundingClientRect();\r\n            rectAquarium.default = false;\r\n\r\n            this.setState({ rectAquarium })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fishPosition, rectAquarium, angle, size, direction } = this.state;\r\n\r\n        return (\r\n            <img\r\n                ref={this.getFishSizeInfo}\r\n                src={FishSvg}\r\n                alt=\"\"\r\n                className={classes.Fish}\r\n                style={\r\n                    {\r\n                        width: rectAquarium.width + (size * increaseTheFishBy),\r\n                        height: rectAquarium.height + (size * increaseTheFishBy),\r\n                        top: fishPosition.y,\r\n                        left: fishPosition.x,\r\n                        transform: `\r\n                        rotate(${angle}deg)\r\n                        scaleY(${direction === DIRECTION.RIGHT ? -1 : 1})\r\n                        `\r\n                    }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval and timeout\r\n        clearInterval(this.movementInterval.interval);\r\n        clearTimeout(this.idleTimeout.timeout);\r\n    }\r\n}\r\n\r\nFish.propTypes = {\r\n    food: PropTypes.object\r\n}\r\n\r\nexport default Fish;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Food.module.css';\r\nimport YellowFoodSvg from '../../assets/yellow-food.svg';\r\nimport GreenFoodSvg from '../../assets/green-food.svg';\r\n\r\nconst FOOD_COLOR = {\r\n    GREEN: {\r\n        src: GreenFoodSvg,\r\n        class: 'green'\r\n    },\r\n    YELLOW: {\r\n        src: YellowFoodSvg,\r\n        class: 'yellow'\r\n    }\r\n};\r\n\r\nclass Food extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            yPosition: 0,\r\n            color: Utils.randomBetweenZeroAndOne() ? FOOD_COLOR.GREEN : FOOD_COLOR.YELLOW\r\n        };\r\n\r\n        this.movementInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: 25\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.movementInterval.interval = setInterval(\r\n            this.move,\r\n            this.movementInterval.timeInMilliseconds\r\n        );\r\n    }\r\n\r\n    move = () => {\r\n        // Check if food at aquarium by y axios\r\n        if (this.props.rectAquarium.height > this.state.yPosition) {\r\n            const newYPosition = this.state.yPosition + 1;\r\n\r\n            this.setState({ yPosition: newYPosition });\r\n\r\n            this.props.update({\r\n                y: newYPosition,\r\n                x: this.props.xPosition\r\n            });\r\n        }\r\n        else {\r\n            // destroy instance by call aquarium's function\r\n            this.props.destroy();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { xPosition } = this.props;\r\n        const { yPosition, color } = this.state;\r\n\r\n        return (\r\n            <img\r\n                src={color.src}\r\n                alt=\"\"\r\n                className={[classes.Food, classes[color.class]].join(\" \")}\r\n                style={{ left: xPosition, top: yPosition }}\r\n            />\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval\r\n        clearInterval(this.movementInterval.interval);\r\n    }\r\n}\r\n\r\nFood.propTypes = {\r\n    xPosition: PropTypes.number\r\n};\r\n\r\nexport default Food;","import React from 'react';\r\n\r\nimport classes from './GithubIcon.module.css';\r\nexport default (props) => {\r\n    return(\r\n    <a target=\"_blank\" href={\"https://github.com/alonlevim/aquarium\"} className={classes.GithubIcon}>\r\n        {props.children}\r\n    </a>\r\n    )\r\n};","import React from 'react';\r\nimport Fish from '../fish/Fish';\r\nimport Food from '../food/Food';\r\nimport GithubIcon from '../githubIcon/GithubIcon';\r\nimport * as Utils from '../../utils';\r\n\r\nimport classes from './Aquarium.module.css';\r\nimport LandSvg from '../../assets/land.svg';\r\nimport RocksSvg from '../../assets/rocks.svg';\r\nimport RockSvg from '../../assets/rock.svg';\r\nimport StandingSvg from '../../assets/standing.svg';\r\nimport Standing2Svg from '../../assets/standing2.svg';\r\nimport sunlightSvg from '../../assets/sunlight.svg';\r\nimport SeaKelpSvg from '../../assets/sea-kelp.svg';\r\nimport BlueShapeSvg from '../../assets/blue-shape.svg';\r\nimport BlueShape2Svg from '../../assets/blue-shape2.svg';\r\nimport GreenShapeSvg from '../../assets/green-shape.svg';\r\nimport GreenShape2Svg from '../../assets/green-shape2.svg';\r\nimport PurpleShapeSvg from '../../assets/purple-shape.svg';\r\nimport RedShapeSvg from '../../assets/red-shape.svg';\r\nimport BubbleSvg from '../../assets/bubble.svg';\r\nimport Rock2Svg from '../../assets/rock2.svg';\r\nimport { clearInterval } from 'timers';\r\n\r\nconst borderRadius = 30;\r\nconst scaleBubble = { min: 0.1, max: 1.5 };\r\n\r\nclass Aquarium extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentBubbles: 0,\r\n            bubblesList: new Array(50),\r\n            fishCount: 0,\r\n            fishList: [],\r\n            foodInstance: null,\r\n            rectAquarium: null\r\n        };\r\n\r\n        this.addBubbleInterval = {\r\n            interval: null,\r\n            timeInMilliseconds: 250\r\n        };\r\n\r\n        this.aquariumRef = React.createRef();\r\n\r\n        this.foodPoint = null;\r\n\r\n        // When click on aquarium show one food\r\n        document.addEventListener(\"click\", this.handleClick);\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAquariumSizeInfo();\r\n        this.addBubbleToScreen();\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        // Check if there is no food in aquarium\r\n        if (!this.state.foodInstance) {\r\n            // Check mouse clicked on this aquarium\r\n            const mousePoint = { x: event.pageX, y: event.pageY, width: 1, height: 1 };\r\n            const { rectAquarium } = this.state;\r\n\r\n            if (Utils.collisionDetection(mousePoint, rectAquarium)) {\r\n                const foodInstance = <Food\r\n                    xPosition={event.pageX - this.state.rectAquarium.x}\r\n                    destroy={this.destroyFood}\r\n                    rectAquarium={this.state.rectAquarium}\r\n                    update={this.updateFood}\r\n                />;\r\n\r\n                this.setState({ foodInstance });\r\n            }\r\n        }\r\n    };\r\n    handleResize = (event) => {\r\n        this.getAquariumSizeInfo();\r\n    };\r\n\r\n    /**\r\n     * Remove food from state\r\n     */\r\n    destroyFood = () => {\r\n        // Clear food point\r\n        this.foodPoint = null;\r\n        this.setState({ foodInstance: null });\r\n    };\r\n\r\n    addBubbleToScreen = () => {\r\n        this.addBubbleInterval.interval = setInterval(() => {\r\n            this.setState((state) => {\r\n                // New assign to object bubbles\r\n                const { bubblesList } = state;\r\n                let { currentBubbles } = state;\r\n\r\n                // If current find in last bubble in list\r\n                if (currentBubbles >= bubblesList.length) {\r\n                    currentBubbles = 0;\r\n                }\r\n\r\n                // Get random point to instance bubble\r\n                const xPosition = Math.floor(Math.random() * window.innerWidth);\r\n                // Get random scale of bubble\r\n                const scale = (Math.random() + scaleBubble.min) * scaleBubble.max;\r\n\r\n                // Reset next bubble in list\r\n                bubblesList[currentBubbles + 1 < bubblesList.length ? currentBubbles + 1 : 0] = null;\r\n                // New assign bubble in current index in bubble list\r\n                bubblesList[currentBubbles] = <img\r\n                    key={currentBubbles}\r\n                    src={BubbleSvg}\r\n                    alt=\"\"\r\n                    className={classes.Bubble}\r\n                    style={{ bottom: \"50px\", right: `${xPosition}px`, transform: `scale(${scale})` }}\r\n                />;\r\n                // Plus current index bubble\r\n                currentBubbles++;\r\n\r\n                // Update state\r\n                return { bubblesList, currentBubbles };\r\n            });\r\n        }, this.addBubbleInterval.timeInMilliseconds);\r\n    }\r\n\r\n    /**\r\n     * When food position changed, will update food point without state in this component\r\n     */\r\n    updateFood = (food) => {\r\n        this.foodPoint = food;\r\n    };\r\n\r\n    /**\r\n     * Get width, height and position of aquarium by reference React\r\n     */\r\n    getAquariumSizeInfo = () => {\r\n        // Check if aquarium detail override at state\r\n        const elementAquarium = this.aquariumRef.current.getBoundingClientRect();\r\n        const rectAquarium = {\r\n            x: elementAquarium.x + borderRadius / 2,\r\n            y: elementAquarium.y + borderRadius / 2,\r\n            width: elementAquarium.width - borderRadius,\r\n            height: elementAquarium.height - borderRadius\r\n        };\r\n\r\n        const numberOfFish = elementAquarium.width < 1000 ? 2 : 5;\r\n        this.setState({ rectAquarium, fishCount: numberOfFish }\r\n            // Callback add fish on game\r\n            , this.initInstanceFish);\r\n    }\r\n\r\n    initInstanceFish = () => {\r\n        const { fishCount, fishList } = this.state;\r\n        if (fishList.length === 0) {\r\n            for (var i = 0; i < fishCount; i++) {\r\n                fishList.push((index, rectAquarium) =>\r\n                    <Fish\r\n                        key={index}\r\n                        rectAquarium={rectAquarium}\r\n                        food={this.foodPoint}\r\n                        destroyFood={this.destroyFood}\r\n                    />);\r\n            }\r\n\r\n            this.setState({ fishList });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Aquarium}>\r\n                <GithubIcon />\r\n                <div className={classes.Background} ref={this.aquariumRef}>\r\n                    <img src={StandingSvg} alt=\"\" className={classes.Standing} />\r\n                    <img src={Standing2Svg} alt=\"\" className={classes.Standing2} />\r\n                    <img src={SeaKelpSvg} alt=\"\" className={classes.SeaKelp} />\r\n                    <img src={RockSvg} alt=\"\" className={classes.Rock} />\r\n                    <img src={RocksSvg} alt=\"\" className={classes.Rocks} />\r\n                    <img src={BlueShapeSvg} alt=\"\" className={classes.BlueShape} />\r\n                    <img src={BlueShape2Svg} alt=\"\" className={classes.BlueShape2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock2} />\r\n                    <img src={Rock2Svg} alt=\"\" className={classes.Rock3} />\r\n                    <img src={GreenShapeSvg} alt=\"\" className={classes.GreenShape} />\r\n                    <img src={GreenShape2Svg} alt=\"\" className={classes.GreenShape2} />\r\n                    <img src={PurpleShapeSvg} alt=\"\" className={classes.PurpleShape} />\r\n                    <img src={RedShapeSvg} alt=\"\" className={classes.RedShape} />\r\n                    {this.state.bubblesList.map(item => item)}\r\n                    {this.state.foodInstance}\r\n                    {this.state.fishList.map((item, index) => item(index, this.state.rectAquarium))}\r\n                    <img src={LandSvg} alt=\"\" className={classes.Land} />\r\n                    <img src={sunlightSvg} alt=\"\" className={classes.Sunlight} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // When this component is destroy, this function will clear interval and click event listener\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        document.removeEventListener(\"resize\", this.handleResize);\r\n        clearInterval(this.addBubbleInterval.interval);\r\n    }\r\n}\r\n\r\nexport default Aquarium;","import React from 'react';\r\nimport Aquarium from './components/aquarium/Aquarium';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Aquarium />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}